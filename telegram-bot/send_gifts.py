import os
import sys
import asyncio
from datetime import datetime
from pyrogram import Client
from supabase import create_client, Client as SupabaseClient

sys.stdout.flush()

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
api_id = int(os.getenv("api_id"))
api_hash = os.getenv("api_hash")
session_name = "account"

# Supabase init
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase: SupabaseClient = create_client(SUPABASE_URL, SUPABASE_KEY)

# Telegram client
app = Client(session_name, api_id, api_hash)

# —Å–ø–µ—Ü-–ø–æ–¥–∞—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ send_gift
SPECIAL_SEND_SLUGS = {"rocket", "diamond", "bear", "heart"}
SPECIAL_GIFT_IDS = {
    "rocket":  5170564780938756245,
    "diamond": 5170521118301225164,
    "bear":    5170233102089322756,
    "heart":   5170145012310081615,
}

async def send_pending_gifts():
    print("üü¢ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –¥–æ await app.start()", flush=True)
    await app.start()
    print("üì§ –ü–æ—Å–ª–µ app.start(): –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω", flush=True)

    while True:
        print("üîÑ –ù–æ–≤—ã–π –∫—Ä—É–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending_rewards...", flush=True)

        # –¥–æ–±–∞–≤–∏–ª–∏ PK id, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞–¥—ë–∂–Ω–æ
        response = supabase.table("pending_rewards") \
            .select("id, msg_id, telegram_id, username, nft_name, nft_number") \
            .eq("status", "pending") \
            .execute()
        pending = response.data

        if not pending:
            print("‚õî –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", flush=True)

        for item in pending:
            rec_id  = item.get("id")
            msg_id  = item.get("msg_id")
            chat_id = item.get("telegram_id")
            username = item.get("username")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
            nft_name = (item.get("nft_name") or "").strip().lower()
            gift_id_from_row = item.get("nft_number")  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º –∏–∑-–∑–∞ JS

            try:
                # –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü-–ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º send_gift —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º gift_id
                if nft_name in SPECIAL_SEND_SLUGS:
                    resolved_id = SPECIAL_GIFT_IDS.get(nft_name)
                    if not resolved_id:
                        print(f"‚ö† gift_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {nft_name}, –ø—Ä–æ–ø—É—Å–∫ id={rec_id}", flush=True)
                        continue

                    # chat_id –º–æ–∂–µ—Ç –±—ã—Ç—å int, –ª–∏–±–æ username-—Å—Ç—Ä–æ–∫–∞
                    target = chat_id if chat_id is not None else (username or "").lstrip("@")
                    print(f"‚û°Ô∏è send_gift: {nft_name} -> gift_id={resolved_id}, target={target}", flush=True)
                    await app.send_gift(chat_id=target, gift_id=int(resolved_id))

                    # –æ–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –ø–æ PK
                    supabase.table("pending_rewards").update({
                        "status": "send",
                        "sent_at": datetime.utcnow().isoformat()
                    }).eq("id", rec_id).execute()

                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ send_gift, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", flush=True)
                    continue

                # –∏–Ω–∞—á–µ ‚Äî —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: –ø–µ—Ä–µ–¥–∞—ë–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ msg_id
                print(f"‚û°Ô∏è transfer_gift: msg_id={msg_id}, chat_id={chat_id}", flush=True)
                await app.transfer_gift(owned_gift_id=str(msg_id), new_owner_chat_id=chat_id)
                print(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ {msg_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}", flush=True)

                # –æ–±–Ω–æ–≤–ª—è–µ–º pending_rewards –∏ –ø–æ–º–µ—á–∞–µ–º available_gifts.used = True
                supabase.table("pending_rewards").update({
                    "status": "send",
                    "sent_at": datetime.utcnow().isoformat()
                }).eq("id", rec_id).execute()

                supabase.table("available_gifts").update({"used": True}) \
                    .eq("msg_id", msg_id).execute()
                print("üìù –°—Ç–∞—Ç—É—Å –∏ used –æ–±–Ω–æ–≤–ª–µ–Ω—ã", flush=True)

            except Exception as e:
                text = str(e)
                if "PEER_ID_INVALID" in text:
                    print(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id or username} –Ω–µ –ø–∏—Å–∞–ª –≤ –õ–°. –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", flush=True)
                elif "STARGIFT_USAGE_LIMITED" in text:
                    print(f"‚ö† Gift {gift_id_from_row} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ª–∏–º–∏—Ç/—Ä–∞—Å–ø—Ä–æ–¥–∞–Ω).", flush=True)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ({nft_name}): {e}", flush=True)

        await asyncio.sleep(60)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ event loop...", flush=True)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(send_pending_gifts())
