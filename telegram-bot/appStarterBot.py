import os
import time
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from supabase import create_client, Client

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")

WEBAPP_URL = os.getenv("WEBAPP_URL", "https://frontend-nine-sigma-49.vercel.app/")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = telebot.TeleBot(BOT_TOKEN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    args = message.text.split()
    ref_id = args[1] if len(args) > 1 else None

    print(f"üü¢ /start –æ—Ç {user.id} ({user.username}) | ref_id: {ref_id}")

    url = WEBAPP_URL
    if ref_id and str(user.id) != str(ref_id):
        url += f"?referrer={ref_id}&tgWebAppExpand=true"
    else:
        url += "?tgWebAppExpand=true"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=url)
        )
    )

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! üëã\n–ó–∞–ø—É—Å—Ç–∏ Mini App –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
def notify_upcoming_wheels():
    try:
        response = supabase.table("wheels") \
            .select("id, nft_name") \
            .eq("status", "completed") \
            .eq("notified", False) \
            .execute()
        
        wheels = response.data

        for wheel in wheels:
            wheel_id = wheel["id"]
            nft_name = wheel.get("nft_name", "your prize")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —ç—Ç–æ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É
            result_res = supabase.table("wheel_results") \
                .select("username, telegram_id") \
                .eq("wheel_id", wheel_id) \
                .execute()

            if not result_res.data:
                continue

            winner = result_res.data[0]
            username = winner.get("username", "User")
            telegram_id = winner.get("telegram_id")

            if telegram_id:
                try:
                    bot.send_message(
                        telegram_id,
                        f"{username}! Your game for a prize {nft_name} will start in 1 minute! üéâ"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ notified = true
            supabase.table("wheels").update({"notified": True}).eq("id", wheel_id).execute()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üöÄ AppStarterBot –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç /start")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ–Ω–µ
    import threading

    def poll_notifications():
        while True:
            notify_upcoming_wheels()
            time.sleep(10)

    threading.Thread(target=poll_notifications, daemon=True).start()

    bot.infinity_polling()
