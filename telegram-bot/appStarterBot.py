import os
import time
import threading
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from supabase import create_client, Client
from datetime import datetime, timezone, timedelta  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
import json  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")

WEBAPP_URL = os.getenv("WEBAPP_URL", "https://frontend-nine-sigma-49.vercel.app/")
FREE_SPIN_CHECK_SEC = int(os.getenv("FREE_SPIN_CHECK_SEC", "900"))  # ‚Üê –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–∏—Å–ø–∏–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç)

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = telebot.TeleBot(BOT_TOKEN)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    args = message.text.split()
    ref_id = args[1] if len(args) > 1 else None

    print(f"üü¢ /start –æ—Ç {user.id} ({user.username}) | ref_id: {ref_id}")

    url = WEBAPP_URL
    if ref_id and str(user.id) != str(ref_id):
        url += f"?referrer={ref_id}&tgWebAppExpand=true"
    else:
        url += "?tgWebAppExpand=true"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=url)
        )
    )

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! üëã\n–ó–∞–ø—É—Å—Ç–∏ Mini App –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# --- –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–∫–∞–∫ –±—ã–ª–æ) ---
def notify_users_loop():
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª—ë—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è, –Ω–æ –µ—â—ë –Ω–µ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã
            response = supabase.table('wheels').select('*') \
                .eq('status', 'completed').eq('notified', False).execute()

            wheels = response.data if response.data else []

            for wheel in wheels:
                wheel_id = wheel['id']
                nft_name = wheel.get('nft_name', 'prize')

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –∫–æ–ª–µ—Å–∞
                participants_response = supabase.table('wheel_participants') \
                    .select('telegram_id, username') \
                    .eq('wheel_id', wheel_id).execute()

                participants = participants_response.data if participants_response.data else []

                for user in participants:
                    telegram_id = user['telegram_id']
                    username = user.get('username', 'Player')

                    try:
                        keyboard = InlineKeyboardMarkup()
                        keyboard.add(
                            InlineKeyboardButton(
                                "üéØ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É",
                                web_app=WebAppInfo(url=f"{WEBAPP_URL}/wheel/{wheel_id}?tgWebAppExpand=true")
                            )
                        )

                        bot.send_message(
                            telegram_id,
                            f"{username}! Your game for a prize {nft_name} will start in 1 minute! üéÅ",
                            reply_markup=keyboard
                        )
                        print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {telegram_id}: {e}")

                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
                supabase.table('wheels').update({'notified': True}).eq('id', wheel_id).execute()

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", e)

        time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

# === ‚Üì‚Üì‚Üì –ù–û–í–´–ô –ë–õ–û–ö: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω (—Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫) ‚Üì‚Üì‚Üì ===

def _utcnow():
    return datetime.now(timezone.utc)

def _parse_ts(v):
    if not v:
        return None
    try:
        return datetime.fromisoformat(str(v).replace("Z", "+00:00")).astimezone(timezone.utc)
    except Exception:
        return None

def _get_cheapest_case_id():
    # —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–µ–π—Å (–ø–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω)
    res = supabase.table("cases") \
        .select("id, price, is_active") \
        .eq("is_active", True) \
        .order("price", ascending=True) \
        .limit(1) \
        .execute()
    rows = res.data or []
    return rows[0]["id"] if rows else None

def _get_depositors_tids():
    # –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ–≥–æ –µ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (sells)
    res = supabase.table("sells").select("telegram_id").execute()
    ids = [r["telegram_id"] for r in (res.data or []) if r.get("telegram_id")]
    return list({int(x) for x in ids})

def _load_users_by_tids(tids):
    users = []
    for i in range(0, len(tids), 100):
        batch = tids[i:i+100]
        q = supabase.table("users").select(
            "id, telegram_id, username, free_spin_last_at, free_spin_last_notified_at"
        ).in_("telegram_id", batch).execute()
        users.extend(q.data or [])
    return users

def _eligible_free(users):
    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –µ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç + (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∫—Ä—É—Ç–∏–ª –∏–ª–∏ –ø—Ä–æ—à–ª–æ 24—á) + –µ—â—ë –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞
    out, now = [], _utcnow()
    day = timedelta(hours=24)
    for u in users:
        last = _parse_ts(u.get("free_spin_last_at"))
        notified = _parse_ts(u.get("free_spin_last_notified_at"))
        has_right = (last is None) or (now >= (last + day))
        # —É–≤–µ–¥–æ–º–ª—è–µ–º 1 —Ä–∞–∑ –Ω–∞ —Ü–∏–∫–ª, –ø–æ–∫–∞ —Å–Ω–æ–≤–∞ –Ω–µ –±—É–¥–µ—Ç free_spin_last_at + 24—á
        edge = (last or datetime(1970, 1, 1, tzinfo=timezone.utc)) + day
        not_notified_yet = (notified is None) or (notified < edge)
        if has_right and not_notified_yet:
            out.append(u)
    return out

def _build_free_markup(case_id: str):
    # –∫–Ω–æ–ø–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è mini-app –Ω–∞ –Ω—É–∂–Ω–æ–º –∫–µ–π—Å–µ
    url = f"{WEBAPP_URL}?tgWebAppExpand=true&open_case={case_id}"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üéÅ –ö—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", web_app=WebAppInfo(url=url)))
    return kb

def _mark_free_notified(user_id: str):
    supabase.table("users").update({
        "free_spin_last_notified_at": _utcnow().isoformat()
    }).eq("id", user_id).execute()

def notify_free_spin_loop():
    print("[free-spin] notifier started (interval:", FREE_SPIN_CHECK_SEC, "sec)")
    while True:
        try:
            # 1) –≤—ã—è—Å–Ω—è–µ–º —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–µ–π—Å
            case_id = _get_cheapest_case_id()
            if not case_id:
                time.sleep(FREE_SPIN_CHECK_SEC)
                continue

            # 2) —É –∫–æ–≥–æ –±—ã–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            tids = _get_depositors_tids()
            if not tids:
                time.sleep(FREE_SPIN_CHECK_SEC)
                continue

            # 3) –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Å–ª–æ–≤–∏—é —Ñ—Ä–∏—Å–ø–∏–Ω–∞
            users = _load_users_by_tids(tids)
            cand = _eligible_free(users)

            if cand:
                print(f"[free-spin] candidates: {len(cand)}")

            # 4) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for u in cand:
                try:
                    kb = _build_free_markup(case_id)
                    bot.send_message(
                        u["telegram_id"],
                        "üéÅ –î–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω! –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
                        reply_markup=kb
                    )
                    _mark_free_notified(u["id"])
                    print("[free-spin] sent ‚Üí", u["telegram_id"])
                except Exception as e:
                    print("[free-spin] send fail:", u["telegram_id"], e)

        except Exception as e:
            print("[free-spin] tick fail:", e)

        time.sleep(FREE_SPIN_CHECK_SEC)

# === ‚Üë‚Üë‚Üë –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ‚Üë‚Üë‚Üë ===

# --- –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("üöÄ AppStarterBot –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç /start")

    # –ü–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–æ–ª—ë—Å–∞–º (—Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
    threading.Thread(target=notify_users_loop, daemon=True).start()

    # –ü–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Å–ø–∏–Ω–µ (–Ω–æ–≤—ã–π)
    threading.Thread(target=notify_free_spin_loop, daemon=True).start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
    bot.infinity_polling()
