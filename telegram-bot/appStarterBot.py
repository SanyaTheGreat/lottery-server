import os
import time
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from supabase import create_client, Client

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://frontend-nine-sigma-49.vercel.app/")

if not BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö")

# üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∏ –±–æ—Ç–∞
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = telebot.TeleBot(BOT_TOKEN)

# üéâ –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    args = message.text.split()
    ref_id = args[1] if len(args) > 1 else None

    print(f"üü¢ /start –æ—Ç {user.id} ({user.username}) | ref_id: {ref_id}")

    url = WEBAPP_URL
    if ref_id and str(user.id) != str(ref_id):
        url += f"?referrer={ref_id}&tgWebAppExpand=true"
    else:
        url += "?tgWebAppExpand=true"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=url)
        )
    )

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! üëã\n–ó–∞–ø—É—Å—Ç–∏ Mini App –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# üîî –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
def check_and_notify():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–∞ –∑–∞–ø—É—Å–∫...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª—ë—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º completed –∏ notified = false/null
    wheels_query = supabase.table("wheels").select("*").eq("status", "completed").is_("notified", None)
    data = wheels_query.execute()

    if not data.data:
        return

    for wheel in data.data:
        wheel_id = wheel["id"]
        nft_name = wheel.get("nft_name", "–≤–∞—à –ø—Ä–∏–∑")
        print(f"üì£ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–ª–µ—Å–∞ #{wheel_id}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ –∫–æ–ª–µ—Å–∞
        participants_query = supabase.table("wheel_participants").select("telegram_id, username").eq("wheel_id", wheel_id)
        participants = participants_query.execute().data

        for p in participants:
            tg_id = p.get("telegram_id")
            username = p.get("username", "")
            if not tg_id:
                continue

            try:
                bot.send_message(
                    tg_id,
                    f"üéØ {username or '–ò–≥—Ä–æ–∫'}! Your game for a prize {nft_name} will start in 1 minute!"
                )
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tg_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {tg_id}: {e}")

        # –û—Ç–º–µ—á–∞–µ–º –∫–æ–ª–µ—Å–æ –∫–∞–∫ –æ–ø–æ–≤–µ—â—ë–Ω–Ω–æ–µ
        supabase.table("wheels").update({"notified": True}).eq("id", wheel_id).execute()
        print(f"‚úÖ –ö–æ–ª–µ—Å–æ #{wheel_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ notified")

if __name__ == "__main__":
    print("üöÄ AppStarterBot –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç /start")

    # –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        try:
            check_and_notify()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_and_notify: {e}")
        time.sleep(10)

    # –û—Å–Ω–æ–≤–Ω–æ–π polling –±–æ—Ç–∞
    bot.infinity_polling()
