import { supabase } from "../../services/supabaseClient.js";
import { v4 as uuidv4 } from "uuid";

// üé∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∏–Ω
export const spinCase = async (req, res) => {
  try {
    const { case_id, telegram_id } = req.body;

    if (!case_id || !telegram_id) {
      return res.status(400).json({ error: "case_id –∏ telegram_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ–π—Å
    const { data: caseData, error: caseError } = await supabase
      .from("cases")
      .select("*")
      .eq("id", case_id)
      .eq("status", "active")
      .single();

    if (caseError || !caseData) {
      return res.status(404).json({ error: "–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω" });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", telegram_id)
      .single();

    if (userError || !user) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (user.stars < caseData.price) {
      return res.status(402).json({ error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω—É–∂–Ω–æ ${caseData.price} –∑–≤—ë–∑–¥)` });
    }

    // 3. –°–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
    await supabase
      .from("users")
      .update({ stars: user.stars - caseData.price })
      .eq("telegram_id", telegram_id);

    // 4. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∫–µ–π—Å–∞
    const { data: items, error: itemsError } = await supabase
      .from("case_items")
      .select("*")
      .eq("case_id", case_id)
      .eq("active", true);

    if (itemsError || !items?.length) {
      return res.status(400).json({ error: "–í –∫–µ–π—Å–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤" });
    }

    // 5. RNG –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
    const weightsSum = items.reduce((sum, i) => sum + Number(i.weight), 0);
    const rng = Math.random() * weightsSum;

    let selectedItem = null;
    let cumulative = 0;
    for (const item of items) {
      cumulative += Number(item.weight);
      if (rng <= cumulative) {
        selectedItem = item;
        break;
      }
    }

    // 6. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏–Ω
    const spinId = uuidv4();
    const status = selectedItem ? "won" : "lose";

    const { data: spin, error: spinError } = await supabase
      .from("case_spins")
      .insert([{
        id: spinId,
        case_id,
        user_id: user.id,
        item_id: selectedItem?.id || null,
        status,
        rng_roll: rng,
        weights_sum: weightsSum,
        prize_slug: selectedItem?.slug || null,
        price: caseData.price,
        started_at: new Date().toISOString()
      }])
      .select()
      .single();

    if (spinError) throw spinError;

    return res.json({
      spin_id: spin.id,
      status,
      rng_roll: rng,
      prize: selectedItem ? {
        item_id: selectedItem.id,
        type: selectedItem.type,
        tier: selectedItem.tier,
        slug: selectedItem.slug
      } : null
    });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ spinCase:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏–Ω–µ –∫–µ–π—Å–∞" });
  }
};

// üèÜ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑
export const claimPrize = async (req, res) => {
  try {
    const { id } = req.params;

    const { data: spin, error: spinError } = await supabase
      .from("case_spins")
      .select("*, case_items(*)")
      .eq("id", id)
      .single();

    if (spinError || !spin) {
      return res.status(404).json({ error: "–°–ø–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (spin.status !== "won") {
      return res.status(409).json({ error: "–ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ ‚Äî —Å—Ç–∞—Ç—É—Å –Ω–µ won" });
    }

    const item = spin.case_items;

    if (item.type === "gift") {
      // –∏—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
      const { data: gift } = await supabase
        .from("case_gifts")
        .select("*")
        .eq("used", false)
        .eq("slug", item.slug)
        .limit(1)
        .single();

      if (!gift) {
        return res.status(409).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤" });
      }

      // –ø–æ–º–µ—á–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      await supabase.from("case_gifts").update({ used: true }).eq("pending_id", gift.pending_id);

      // —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ pending_rewards
      await supabase.from("pending_rewards").insert([{
        source: "case",
        spin_id: spin.id,
        winner_id: spin.user_id,
        telegram_id: null, // –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
        username: null, // –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
        nft_name: gift.nft_name,
        nft_number: gift.nft_number,
        slug: gift.slug,
        msg_id: gift.msg_id,
        status: "pending",
        created_at: new Date().toISOString()
      }]);

    } else if (item.type === "stars") {
      // –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã
      await supabase.rpc("increment_user_stars", { p_user_id: spin.user_id, p_amount: item.payout_value || 10 });
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ø–∏–Ω–∞
    await supabase.from("case_spins").update({ status: "reward_sent" }).eq("id", spin.id);

    return res.json({ status: "ok", prize: item });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ claimPrize:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞" });
  }
};

// üîÑ –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–∏–∑
export const rerollPrize = async (req, res) => {
  try {
    const { id } = req.params;

    const { data: spin, error: spinError } = await supabase
      .from("case_spins")
      .select("*, case_items(*)")
      .eq("id", id)
      .single();

    if (spinError || !spin) {
      return res.status(404).json({ error: "–°–ø–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (spin.status !== "won") {
      return res.status(409).json({ error: "–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å ‚Äî —Å—Ç–∞—Ç—É—Å –Ω–µ won" });
    }

    const item = spin.case_items;

    // –Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é reroll_amount
    const rerollAmount = item.payout_value || 5;

    await supabase.rpc("increment_user_stars", { p_user_id: spin.user_id, p_amount: rerollAmount });

    await supabase
      .from("case_spins")
      .update({ status: "reroll", reroll_amount: rerollAmount })
      .eq("id", spin.id);

    return res.json({ status: "reroll", reroll_amount: rerollAmount });

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ rerollPrize:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–∏–∑–∞" });
  }
};
