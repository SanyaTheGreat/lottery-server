// src/controllers/telegram/webhook.js
import { supabase } from "../../services/supabaseClient.js";

const BOT_TOKEN  = process.env.BOT_TOKEN;
const WEBAPP_URL = process.env.WEBAPP_URL || "https://frontend-nine-sigma-49.vercel.app";

// ----- helpers ----------------------------------------------------

async function tg(method, payload) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/${method}`;
  const res = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });
  return res.json();
}

async function sendMessage(chat_id, text, extra = {}) {
  return tg("sendMessage", { chat_id, text, ...extra });
}

async function answerPreCheckoutQuery(id, ok = true, error_message) {
  const body = { pre_checkout_query_id: id, ok };
  if (!ok && error_message) body.error_message = error_message;
  return tg("answerPreCheckoutQuery", body);
}

// –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –í–ù–ò–ó –∫ 0.1, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ—Ä–µ–∑ —Ü–µ–ª—ã–µ –¥–µ—Å—è—Ç—ã–µ
function floorToTenthsInt(value) {
  // –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–æ—à–µ—á–Ω—ã–π —ç–ø—Å–∏–ª–æ–Ω, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10 –∏ –±–µ—Ä—ë–º floor ‚Üí —Ü–µ–ª—ã–µ "–¥–µ—Å—è—Ç—ã–µ"
  return Math.floor((Number(value) + 1e-9) * 10);
}

async function getFx() {
  const { data, error } = await supabase
    .from("fx_rates")
    .select("ton_per_100stars, fee_markup")
    .order("id", { ascending: false })
    .limit(1)
    .single();

  if (error || !data) {
    return { ton_per_100stars: 0.5530, fee_markup: 0.20 };
  }
  return data;
}

// ----- main handler -----------------------------------------------

export default async function telegramWebhook(req, res) {
  try {
    const upd = req.body;

    // 1) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –ø–µ—Ä–µ–¥ —á–µ–∫–∞—É—Ç–æ–º
    if (upd?.pre_checkout_query) {
      await answerPreCheckoutQuery(upd.pre_checkout_query.id, true);
      return res.sendStatus(200);
    }

    const msg = upd?.message || upd?.edited_message;

    // 2) /start (–∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ Mini App + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞)
    if (msg?.text?.startsWith("/start")) {
      const user = msg.from;
      const parts = msg.text.trim().split(/\s+/, 2);
      const ref_id = parts.length > 1 ? parts[1] : null;

      const isSelfRef = ref_id && String(ref_id) === String(user.id);
      const search = new URLSearchParams();
      if (ref_id && !isSelfRef) search.set("referrer", ref_id);
      search.set("tgWebAppExpand", "true");

      const url = `${WEBAPP_URL.replace(/\/$/, "")}/?${search.toString()}`;
      const reply_markup = {
        inline_keyboard: [[
          { text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app: { url } }
        ]]
      };

      await sendMessage(
        msg.chat.id,
        `–ü—Ä–∏–≤–µ—Ç, ${user.first_name || "–¥—Ä—É–≥"}! üëã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`,
        { reply_markup }
      );

      return res.sendStatus(200);
    }

    // 3) –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ Stars ‚Üí –∑–∞—á–∏—Å–ª—è–µ–º tickets (1 TON = 1 ticket)
    const sp = msg?.successful_payment;
    if (sp) {
      const telegram_id = msg.from.id;
      const stars_paid  = sp.total_amount; // integer
      const tx_id = sp.telegram_payment_charge_id || sp.provider_payment_charge_id;

      // –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
      const { data: exists } = await supabase
        .from("sells")
        .select("id")
        .eq("tx_id", tx_id)
        .maybeSingle();
      if (exists) return res.sendStatus(200);

      const { ton_per_100stars, fee_markup } = await getFx();
      const ton_per_star  = Number(ton_per_100stars) / 100;
      const netMultiplier = 1 - Number(fee_markup);

      // "—Å—ã—Ä–æ–µ" TON –∫–∞–∫ —á–∏—Å–ª–æ (–¥–ª—è –∞—É–¥–∏—Ç–∞/–ª–æ–≥–æ–≤), –Ω–æ –≤—Å–µ —Ä–∞—Å—á—ë—Ç—ã –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è ‚Äî –≤ –∏–Ω—Ç–µ–¥–∂–µ—Ä–∞—Ö –¥–µ—Å—è—Ç—ã—Ö
      const tickets_raw = Number(stars_paid) * ton_per_star * netMultiplier;

      // —Ü–µ–ª—ã–µ "–¥–µ—Å—è—Ç—ã–µ": –æ–∫—Ä—É–≥–ª—è–µ–º –í–ù–ò–ó –∫ —à–∞–≥—É 0.1
      const tickets_tenths = floorToTenthsInt(tickets_raw); // int
      const tickets_credit = tickets_tenths / 10;           // decimal —Å 1 –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –±–µ–∑ –¥—Ä–æ–∂–∞–Ω–∏—è

      // –õ–æ–≥ –≤ sells
      await supabase.from("sells").insert({
        telegram_id,
        amount_stars: stars_paid,
        // —Ö—Ä–∞–Ω–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É/decimal —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ:
        amount_ton: Number.isFinite(tickets_raw) ? Number(tickets_raw.toFixed(6)) : null,
        amount: tickets_credit,        // —á—Ç–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ
        rate_at: ton_per_100stars,
        tx_id,
        status: "paid",
        payload: JSON.stringify({ currency: sp.currency })
      });

      // –ó–∞—á–∏—Å–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (users.tickets), –∫–æ–ø–∏–º —á–µ—Ä–µ–∑ —Ü–µ–ª—ã–µ "–¥–µ—Å—è—Ç—ã–µ"
      const { data: user } = await supabase
        .from("users")
        .select("id, tickets")
        .eq("telegram_id", telegram_id)
        .maybeSingle();

      const delta = tickets_tenths / 10; // –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.1 TON)

      if (user) {
        const new_balance = Number(((user.tickets || 0) + delta).toFixed(2));
        await supabase
        .from("users")
        .update({ tickets: new_balance })
        .eq("id", user.id);
      } else {
        await supabase
          .from("users")
          .insert({ telegram_id, tickets: Number(delta.toFixed(2)) });
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendMessage(
        msg.chat.id,
        `–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ Successful: ${tickets_credit.toFixed(1)} TON`
      );

      return res.sendStatus(200);
    }

    // 4) –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return res.sendStatus(200);
  } catch (err) {
    console.error("Telegram webhook error:", err);
    return res.sendStatus(500);
  }
}
