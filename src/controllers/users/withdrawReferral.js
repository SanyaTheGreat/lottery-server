import { supabase } from '../../services/supabaseClient.js';
import { sendTon } from '../../utils/tonSender.js';

// –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 9 –∑–Ω–∞–∫–æ–≤ (TON)
const normAmount = (n) => Number.parseFloat(Number(n).toFixed(9));

const withdrawReferral = async (req, res) => {
  try {
    // üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ JWT
    const telegram_id = req.user?.telegram_id;
    if (!telegram_id) return res.status(401).json({ error: 'Unauthorized' });

    // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å—É–º–º—É –∏–∑ —Ç–µ–ª–∞
    const { amount } = req.body || {};
    const amountNum = Number(amount);

    if (!Number.isFinite(amountNum) || amountNum <= 0) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞' });
    }
    if (amountNum < 3) {
      return res.status(400).json({ error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî 3 TON' });
    }

    // 1) –ß–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—à–µ–ª—ë–∫ –∏ –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫)
    const { data: user, error: userErr } = await supabase
      .from('users')
      .select('id, wallet, referral_earnings')
      .eq('telegram_id', telegram_id)
      .single();

    if (userErr || !user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    if (!user.wallet) {
      return res.status(400).json({ error: '–ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ TON-–∞–¥—Ä–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.' });
    }

    // ‚öôÔ∏è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 9 –∑–Ω–∞–∫–æ–≤
    const available = Math.floor(Number(user.referral_earnings || 0) * 1e9) / 1e9;
    const sum = Math.floor(amountNum * 1e9) / 1e9;

    if (sum > available) {
      return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞' });
    }

    // 2) –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ –≤ —Å—Ç–∞—Ç—É—Å–µ pending
    const nowISO = new Date().toISOString();
    const { data: createdWd, error: insErr } = await supabase
      .from('referral_withdrawals')
      .insert([{
        telegram_id,
        user_id: user.id,
        wallet: user.wallet,          // ‚ö†Ô∏è –∫–æ—à–µ–ª—ë–∫ –±–µ—Ä—ë–º –∏–∑ –ë–î, –Ω–µ –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞
        amount: sum,
        status: 'pending',
        created_at: nowISO,
      }])
      .select()
      .single();

    if (insErr) {
      console.error('‚ùå Insert withdrawal failed:', insErr.message);
      return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥' });
    }

    // 3) –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TON
    try {
      await sendTon(user.wallet, sum);
    } catch (sendErr) {
      console.error('‚ùå sendTon failed:', sendErr?.message || sendErr);

      // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed, –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ—Ñ.–±–∞–ª–∞–Ω—Å–∞
      await supabase
        .from('referral_withdrawals')
        .update({ status: 'failed', error_message: String(sendErr?.message || sendErr), failed_at: new Date().toISOString() })
        .eq('id', createdWd.id);

      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    // 4) –ê—Ç–æ–º–∞—Ä–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–≤–∞—Ç–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤)
    const { data: updatedUser, error: decErr } = await supabase
      .from('users')
      .update({ referral_earnings: normAmount(available - sum) })
      .eq('telegram_id', telegram_id)
      .gte('referral_earnings', sum)
      .select('referral_earnings')
      .single();

    if (decErr || !updatedUser) {
      await supabase
        .from('referral_withdrawals')
        .update({
          status: 'sent_needs_manual_fix',
          error_message: decErr?.message || 'Balance update failed after send',
          confirmed_at: new Date().toISOString()
        })
        .eq('id', createdWd.id);

      return res.status(202).json({
        success: false,
        message: 'TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
      });
    }

    // 5) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–≤–æ–¥
    await supabase
      .from('referral_withdrawals')
      .update({ status: 'confirmed', confirmed_at: new Date().toISOString() })
      .eq('id', createdWd.id);

    return res.status(200).json({
      success: true,
      message: `–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sum} TON`,
      new_balance: updatedUser.referral_earnings,
    });
  } catch (err) {
    console.error('‚ùå withdrawReferral unexpected error:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

export default withdrawReferral;
