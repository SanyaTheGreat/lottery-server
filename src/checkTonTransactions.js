import fetch from 'node-fetch'
import handleTransaction from './controllers/users/processPurchase.js'
import { supabase } from './services/supabaseClient.js'
import dotenv from 'dotenv'

dotenv.config()

const WALLET_ADDRESS = '0:c452f348330512d374fe3a49c218385c2880038d8fe1c39291974cfc838d4f2a'
const CHECK_INTERVAL = 60_000

// üöÄ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ payload
function parsePayload(payload) {
  try {
    const decoded = Buffer.from(payload, 'base64').toString('utf-8')
    if (/^\d{5,}$/.test(decoded)) return decoded
    return null
  } catch (err) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ payload:', err.message)
    return null
  }
}

async function getIncomingTransactions() {
  const url = `https://tonapi.io/v2/blockchain/accounts/${WALLET_ADDRESS}/transactions?limit=20`
  console.log('üîó URL –∑–∞–ø—Ä–æ—Å–∞ TonAPI:', url)

  const res = await fetch(url)
  const data = await res.json()

  if (!res.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ TonAPI:', data)
    return []
  }

  return data.transactions || []
}

async function isTxProcessed(tx_hash) {
  const { data, error } = await supabase
    .from('sells')
    .select('id')
    .eq('tx_hash', tx_hash)
    .maybeSingle()

  return !!data
}

async function checkTransactions() {
  try {
    const transactions = await getIncomingTransactions()

    if (transactions.length === 0) {
      console.log('üîç –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.')
      return
    }

    for (const tx of transactions) {
      const tx_hash = tx.hash
      const inMsg = tx.in_msg

      if (!inMsg || !inMsg.source?.address || !inMsg.value) continue

      const sender = inMsg.source.address
      const destination = inMsg.destination
      const amountTON = parseInt(inMsg.value) / 1e9
      const payload = inMsg.payload || ''

      // üéØ –¢–æ–ª—å–∫–æ –Ω–∞ –Ω–∞—à –∫–æ—à–µ–ª—ë–∫
      if (destination !== WALLET_ADDRESS) continue

      // ‚õî –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã
      if (amountTON <= 0) continue

      // ‚ùå –°–∫–∞–º-–∞–¥—Ä–µ—Å–∞
      if (inMsg.source.is_scam) {
        console.warn(`üö´ –°–∫–∞–º-–∞–¥—Ä–µ—Å: ${sender} ‚Äî —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞`)
        continue
      }

      // ‚õî –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
      const already = await isTxProcessed(tx_hash)
      if (already) continue

      // üì¶ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ payload
      const telegram_id = parsePayload(payload)
      if (!telegram_id) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å telegram_id –∏–∑ payload: "${payload}"`)
        continue
      }

      const readableDate = new Date(tx.utime * 1000).toLocaleString()
      console.log(`üí∏ [${readableDate}] –ü–æ–ª—É—á–µ–Ω–æ ${amountTON} TON –æ—Ç ${sender} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_id}`)
      console.log(`üîó –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx_hash}`)

      // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
      await handleTransaction(sender, amountTON, tx_hash, telegram_id)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message)
  }
}

console.log('üöÄ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON...')
setInterval(checkTransactions, CHECK_INTERVAL)
