import fetch from 'node-fetch';
import handleTransaction from './controllers/users/processPurchase.js';
import { supabase } from './services/supabaseClient.js';
import dotenv from 'dotenv';

dotenv.config();

const TONAPI_KEY = process.env.TONAPI_KEY;
const WALLET_ADDRESS = '0:c452f348330512d374fe3a49c218385c2880038d8fe1c39291974cfc838d4f2a';
const CHECK_INTERVAL = 60_000;

async function getIncomingTransactions() {
  const url = `https://tonapi.io/v2/blockchain/accounts/0:c452f348330512d374fe3a49c218385c2880038d8fe1c39291974cfc838d4f2a/transactions?limit=20`;

  console.log('üîó URL –∑–∞–ø—Ä–æ—Å–∞ TonAPI:', url);
  console.log("üîë TONAPI_KEY:", TONAPI_KEY);

  const res = await fetch(url, {
    headers: {
      Authorization: `Bearer ${TONAPI_KEY}`,
    },
  });

  const data = await res.json();

  if (!res.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ TonAPI:', data);
    return [];
  }

  return data.transactions || [];
}

async function isTxProcessed(tx_hash) {
  const { data, error } = await supabase
    .from('sells')
    .select('id')
    .eq('tx_hash', tx_hash)
    .maybeSingle();

  return !!data;
}

async function checkTransactions() {
  try {
    const transactions = await getIncomingTransactions();

    if (transactions.length === 0) {
      console.log('üîç –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.');
      return;
    }

    for (const tx of transactions) {
      const tx_hash = tx.hash;
      const inMsg = tx.in_msg;

      // ‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!inMsg || !inMsg.source?.address || !inMsg.value) continue;

      const sender = inMsg.source.address;
      const destination = inMsg.destination;
      const amountTON = parseInt(inMsg.value) / 1e9;

      // ‚úÖ –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ –Ω–∞ –Ω–∞—à –∫–æ—à–µ–ª—ë–∫
      if (destination !== WALLET_ADDRESS) continue;

      // ‚úÖ –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
      if (amountTON <= 0) continue;

      // ‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å–∫–∞–º
      if (inMsg.source.is_scam) {
        console.warn(`üö´ –°–∫–∞–º-–∞–¥—Ä–µ—Å: ${sender} ‚Äî —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞`);
        continue;
      }

      // ‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
      const already = await isTxProcessed(tx_hash);
      if (already) continue;

      const readableDate = new Date(tx.utime * 1000).toLocaleString();

      console.log(`üí∏ [${readableDate}] –ü–æ–ª—É—á–µ–Ω–æ ${amountTON} TON –æ—Ç ${sender}`);
      console.log(`üîó –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${tx_hash}`);

      // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
      await handleTransaction(sender, amountTON, tx_hash);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error.message);
  }
}

console.log('üöÄ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON...');
setInterval(checkTransactions, CHECK_INTERVAL);
