import { supabase } from '../services/supabaseClient.js';
import { drawWinner } from '../controllers/wheel/drawWinner.js';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
const checkAndRunDraws = async () => {
  try {
    const now = new Date().toISOString();

    const { data: wheels, error } = await supabase
      .from('wheels')
      .select('id')
      .eq('status', 'active')
      .lte('run_at', now);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª—ë—Å:', error);
      return;
    }

    if (!wheels || wheels.length === 0) {
      console.log('‚è≥ –ù–µ—Ç –∫–æ–ª—ë—Å, –≥–æ—Ç–æ–≤—ã—Ö –∫ –∑–∞–ø—É—Å–∫—É...');
      return;
    }

    for (const wheel of wheels) {
      console.log(`üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –∫–æ–ª–µ—Å–∞: ${wheel.id}`);

      // –ú–æ–∫–∞–µ–º Express-–ø–æ–¥–æ–±–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã req/res
      const mockReq = { params: { wheel_id: wheel.id } };
      const mockRes = {
        status: (code) => ({
          json: (data) => console.log(`üîÅ –û—Ç–≤–µ—Ç drawWinner (${code}):`, data)
        })
      };

      try {
        await drawWinner(mockReq, mockRes);
      } catch (err) {
        console.error(`üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ drawWinner –¥–ª—è –∫–æ–ª–µ—Å–∞ ${wheel.id}:`, err.message);
      }
    }
  } catch (err) {
    console.error('üî• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ-—Ä–æ–∑—ã–≥—Ä—ã—à–∞:', err.message);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(checkAndRunDraws, 10_000);

console.log('üîÅ –ê–≤—Ç–æ-—Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω...');
