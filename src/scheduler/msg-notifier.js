// backend/scheduler/msg-notifier.js
import { supabase } from '../services/supabaseClient.js';

// —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ ENV (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
// –∞–¥—Ä–µ—Å —Ñ—Ä–æ–Ω—Ç–∞ (–Ω–∞ Mini App), –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç
const WEBAPP_URL = process.env.WEBAPP_URL || 'https://frontend-nine-sigma-49.vercel.app';

// –ñ–Å–°–¢–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò (–±–µ–∑ ENV)
const CHECK_INTERVAL_MS = 60 * 60 * 1000; // 1 —á–∞—Å
const RATE_DELAY_MS = 60;                 // 60 –º—Å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (~16‚Äì17 msg/sec)

const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

const tg = (method, payload) =>
  fetch(`https://api.telegram.org/bot${BOT_TOKEN}/${method}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  }).then((r) => r.json());

const sendMessage = (chat_id, text, reply_markup) =>
  tg('sendMessage', { chat_id, text, reply_markup });

async function notifyFreeWheel(wheel) {
  const wheelId = wheel.id;
  const nftName = wheel.nft_name || '–ø–æ–¥–∞—Ä–æ–∫';

  // –ø–æ–ª—É—á–∞—Ç–µ–ª–∏: –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å telegram_id
  const { data: users, error: usersErr } = await supabase
    .from('users')
    .select('telegram_id, username')
    .not('telegram_id', 'is', null);

  if (usersErr) {
    console.error('[msg-notifier] users query error:', usersErr);
    return false;
  }

  // —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∞ web_app -> –ø—Ä—è–º–æ –≤ –ª–æ–±–±–∏ Mini App
  const text =
    `–ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à üéÅ\n` +
    `–ü–æ–¥–∞—Ä–æ–∫: ${nftName}\n` +
    `–ñ–º–∏ ¬´–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ¬ª –Ω–∏–∂–µ`;

  const reply_markup = {
    inline_keyboard: [[
      { text: '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ', web_app: { url: `${WEBAPP_URL.replace(/\/$/, '')}/lobby/${wheelId}` } }
    ]],
  };

  let sent = 0, failed = 0;

  for (const u of users || []) {
    try {
      const j = await sendMessage(u.telegram_id, text, reply_markup);
      if (j?.ok) sent++;
      else failed++; // 403/400 –∏ —Ç.–ø. ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à–∏–ª, –∏–¥—ë–º –¥–∞–ª—å—à–µ
    } catch {
      failed++;
    }
    await sleep(RATE_DELAY_MS);
  }

  // –ø–æ–º–µ—á–∞–µ–º –∫–æ–ª–µ—Å–æ –∫–∞–∫ —Ä–∞–∑–æ—Å–ª–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
  const { error: updErr } = await supabase
    .from('wheels')
    .update({ broadcast_free_sent: true })
    .eq('id', wheelId);

  if (updErr) {
    console.error('[msg-notifier] mark broadcast_free_sent error:', updErr);
    return false;
  }

  console.log(`üîî free broadcast for wheel ${wheelId}: sent=${sent}, failed=${failed}`);
  return true;
}

async function tick() {
  if (!BOT_TOKEN) {
    console.error('[msg-notifier] TELEGRAM_BOT_TOKEN is not set');
    return;
  }
  try {
    // –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ + –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ + –µ—â—ë –Ω–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–Ω—ã–µ
    const { data: wheels, error } = await supabase
      .from('wheels')
      .select('id, nft_name, price, mode, broadcast_free_sent')
      .eq('mode', 'subscription')
      .eq('price', 0)
      .eq('msg', 'yes') 
      .eq('broadcast_free_sent', false)
      .order('id', { ascending: true })
      .limit(5);

    if (error) {
      console.error('[msg-notifier] wheels query error:', error);
      return;
    }

    for (const w of wheels || []) {
      await notifyFreeWheel(w);
    }
  } catch (e) {
    console.error('[msg-notifier] tick error:', e);
  }
}

// üîÅ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–∫–∞–∫ —É —Ç–≤–æ–∏—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á)
if (!global.__MSG_NOTIFIER_STARTED__) {
  global.__MSG_NOTIFIER_STARTED__ = true;
  console.log(`‚è∞ msg-notifier: started | interval=${CHECK_INTERVAL_MS}ms, rateDelay=${RATE_DELAY_MS}ms`);
  tick(); // –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω —Å—Ä–∞–∑—É
  setInterval(tick, CHECK_INTERVAL_MS); // –¥–∞–ª–µ–µ —Ä–∞–∑ –≤ —á–∞—Å
}
