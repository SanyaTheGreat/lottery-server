// src/scheduler/notifier.js
import { supabase } from "../services/supabaseClient.js";

const BOT_TOKEN  = process.env.TELEGRAM_BOT_TOKEN; // —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const WEBAPP_URL = process.env.WEBAPP_URL || "https://frontend-nine-sigma-49.vercel.app";
const INTERVAL_MS = 10_000; // –∫–∞–∫ –∏ –≤ Python-–≤–µ—Ä—Å–∏–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫

async function tg(method, payload) {
  const res = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/${method}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });
  return res.json();
}

async function sendMessage(chat_id, text, reply_markup) {
  return tg("sendMessage", { chat_id, text, reply_markup });
}

async function notifyWheel(wheel) {
  const wheel_id = wheel.id;
  const nft_name = wheel.nft_name || "prize";

  // –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const { data: participants, error: pErr } = await supabase
    .from("wheel_participants")
    .select("telegram_id, username")
    .eq("wheel_id", wheel_id);

  if (pErr) {
    console.error("notify: participants query error:", pErr);
    return false;
  }

  const url = `${WEBAPP_URL.replace(/\/$/, "")}/wheel/${wheel_id}?tgWebAppExpand=true`;
  const reply_markup = {
    inline_keyboard: [[
      { text: "üéØ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É", web_app: { url } }
    ]]
  };

  // —Ä–∞—Å—Å—ã–ª–∞–µ–º
  for (const user of participants || []) {
    const chatId = user.telegram_id;
    const username = user.username || "Player";
    try {
      await sendMessage(
        chatId,
        `${username}! –¢–≤–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ ${nft_name} —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è! –ù–µ –∑–∞–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å @fightforgift –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞. `,
        reply_markup
      );
      // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã
      await new Promise(r => setTimeout(r, 150));
    } catch (e) {
      console.error(`notify: send to ${chatId} failed:`, e);
    }
  }

  // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã–µ
  const { error: uErr } = await supabase
    .from("wheels")
    .update({ notified: true })
    .eq("id", wheel_id);

  if (uErr) {
    console.error("notify: mark notified error:", uErr);
    return false;
  }

  console.log(`üîî notified wheel ${wheel_id} (${nft_name}), users: ${(participants || []).length}`);
  return true;
}

async function tick() {
  try {
    // –≤—ã–±–∏—Ä–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫–æ–ª—ë—Å–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const { data: wheels, error } = await supabase
      .from("wheels")
      .select("id, nft_name")
      .eq("status", "completed")
      .eq("notified", false)
      .limit(50); // –Ω–∞ –≤—Å—è–∫–∏–π

    if (error) {
      console.error("notify: wheels query error:", error);
      return;
    }

    for (const wheel of wheels || []) {
      await notifyWheel(wheel);
    }
  } catch (e) {
    console.error("notify: tick error:", e);
  }
}

// –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
console.log("‚è∞ notifier started (Telegram notifications for completed wheels)");
setInterval(tick, INTERVAL_MS);
